/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ctsimulator;

import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author wilek
 */
public class ResultWindowWithControlls extends javax.swing.JFrame implements Runnable{

    private BufferedImage img;
    private Map<String,SignedPane> images;
    private CTSimulator ct;
    private CT my_simulator;
    private boolean simulating = false;
    private boolean contrast = false;
    private boolean filtering = false;
    /**
     * Creates new form ResultWindowWithControlls
     */
    public ResultWindowWithControlls() {
        initComponents();
    }

   
    
    public ResultWindowWithControlls(BufferedImage img, CTSimulator ct){
        super("Simulation");
        initComponents();
        this.img = img;
        this.ct = ct;
        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanelImages.setLayout(new GridLayout(3,3,20,5));
        
        
        
        images = new HashMap();
        images.put("Orginal", new SignedPane("Orginal image"));
        images.put("Sinogram", new SignedPane("Sinogram"));
        images.put("FSinogram", new SignedPane("Filtered sinogram"));
        images.put("GImage", new SignedPane("Grayscale image"));
        images.put("Result", new SignedPane("Result image"));
        images.put("FResult", new SignedPane("Filtered result image"));
        
        jPanelImages.add(images.get("Orginal"));
        jPanelImages.add(images.get("Sinogram"));
        jPanelImages.add(images.get("FSinogram"));
        jPanelImages.add(images.get("GImage"));
        jPanelImages.add(images.get("Result"));
        jPanelImages.add(images.get("FResult"));
        
        
        pack();
        this.setVisible(true);
        
        my_simulator = new CT(img,Params.getInstance().getnSensors(),
                Params.getInstance().gettAngle(),
                Params.getInstance().getmAngle(),
                images.get("Orginal"),
                images.get("GImage")
        );
        jSliderIterations.setMinimum(0);
        jSliderIterations.setMaximum(my_simulator.getMaxIterations());
        jSliderIterations.setValue(jSliderIterations.getMaximum());
        jLabelIterationsInfo.setText("Ilość iteracji " + jSliderIterations.getValue());
             jSliderIterations.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                 jLabelIterationsInfo.setText("Ilość iteracji " + jSliderIterations.getValue());
                if(!jSliderIterations.getValueIsAdjusting()){
                           generateSimulation();
                           System.out.println(jSliderIterations.getValue() );
                }
            }
        });
        
           
    }
    
      
    public void generateSimulation(){
        if(!simulating){
            new Thread() {
                @Override
                public void run() {
                    simulating = true;
                    int iteration_index = jSliderIterations.getValue();
                    System.out.println("Odpalam symulacje dla " + jSliderIterations.getValue() + " iteracji");
                    my_simulator.generateSimulation(images.get("GImage"), images.get("Sinogram"), images.get("FSinogram"), images.get("Result"), images.get("FResult"),filtering , contrast,iteration_index);
                    DICOMGenerator.DICOMGenerator(my_simulator,
                            Params.getInstance().getPatient_name(), 
                            Params.getInstance().getPatient_id(), 
                            Params.getInstance().getDate()
                    );
                }
           }.start();
        }
        simulating  = false;
    }

    @Override
    public void run() {
        //generateSimulation();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSliderIterations = new javax.swing.JSlider();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanelImages = new javax.swing.JPanel();
        jLabelIterationsInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCheckBox1.setText("pokaż wyniki pośrednie");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("kontrast");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelImagesLayout = new javax.swing.GroupLayout(jPanelImages);
        jPanelImages.setLayout(jPanelImagesLayout);
        jPanelImagesLayout.setHorizontalGroup(
            jPanelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelImagesLayout.setVerticalGroup(
            jPanelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 207, Short.MAX_VALUE)
        );

        jLabelIterationsInfo.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelIterationsInfo)
                        .addGap(106, 106, 106))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(jSliderIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addComponent(jPanelImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSliderIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jCheckBox2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelIterationsInfo)
                    .addComponent(jCheckBox1))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        filtering = jCheckBox1.isSelected();
            
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
         contrast = jCheckBox2.isSelected();
         generateSimulation();
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ResultWindowWithControlls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ResultWindowWithControlls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ResultWindowWithControlls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResultWindowWithControlls.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResultWindowWithControlls().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabelIterationsInfo;
    private javax.swing.JPanel jPanelImages;
    private javax.swing.JSlider jSliderIterations;
    // End of variables declaration//GEN-END:variables
}
